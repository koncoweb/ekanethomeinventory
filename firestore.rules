rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Fungsi untuk memeriksa apakah pengguna sudah login.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fungsi untuk mendapatkan data pengguna dari koleksi 'users'.
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Fungsi untuk memeriksa apakah pengguna memiliki peran tertentu.
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }

    // Fungsi untuk memeriksa apakah pengguna adalah Admin.
    function isAdmin() {
      return hasRole('admin');
    }

    // Fungsi untuk memeriksa apakah pengguna adalah Manajer.
    function isManager() {
      return hasRole('manager');
    }
    
    // Fungsi untuk memeriksa apakah manajer ditugaskan ke cabang tertentu.
    function isManagerOfBranch(branchId) {
      return isManager() && getUserData().branchId == branchId;
    }

    // --- Collection Rules ---

    // Aturan untuk Koleksi Pengguna (Users)
    // Admin bisa mengelola semua pengguna. Pengguna hanya bisa membaca data mereka sendiri.
    match /users/{userId} {
      allow read: if isAdmin() || request.auth.uid == userId;
      allow write: if isAdmin(); // Hanya admin yang bisa membuat/mengubah/menghapus pengguna (misal: mengubah peran)
    }

    // 1. Aturan untuk Manajemen Cabang (Branches)
    // Hanya admin yang bisa membuat, mengubah, atau menghapus cabang.
    // Semua pengguna yang login bisa melihat daftar cabang.
    match /branches/{branchId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // 2. Aturan untuk Manajemen Item Master (Items)
    // Hanya admin yang bisa membuat, mengubah, atau menghapus item master.
    // Semua pengguna yang login bisa melihat daftar item.
    match /items/{itemId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // 3. Aturan untuk Manajemen Inventaris (Inventory)
    // Admin bisa mengelola semua inventaris.
    // Manajer hanya bisa mengelola inventaris di cabang mereka sendiri.
    // Pengguna biasa hanya bisa membaca inventaris di cabang mereka.
    match /inventory/{inventoryId} {
      allow read: if isAdmin() || (isAuthenticated() && getUserData().branchId == resource.data.branchId);
      allow create, update: if isAdmin() || isManagerOfBranch(request.resource.data.branchId);
      allow delete: if isAdmin(); // Biasanya, inventaris tidak dihapus, tapi di-set ke 0. Tapi kita berikan akses ke admin.
    }

    // 4. Aturan untuk Transfer Inventaris (Transfers)
    // Admin bisa mengelola semua transfer.
    // Manajer bisa membuat transfer DARI cabang mereka.
    // Manajer bisa memperbarui (misal: menyetujui) transfer KE cabang mereka.
    // Manajer bisa membaca transfer yang melibatkan cabang mereka (baik dari atau ke).
    match /transfers/{transferId} {
      allow read: if isAdmin() || (isManager() && (isManagerOfBranch(resource.data.fromBranchId) || isManagerOfBranch(resource.data.toBranchId)));
      allow create: if isAdmin() || isManagerOfBranch(request.resource.data.fromBranchId);
      allow update: if isAdmin() || isManagerOfBranch(request.resource.data.toBranchId); // Manajer tujuan yang menyetujui
      allow delete: if isAdmin();
    }
  }
}